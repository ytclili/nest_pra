version: '3.8'

services:
  # MySQL 数据库
  # mysql:
  #   image: mysql:8.0
  #   container_name: nestjs-auth-mysql
  #   environment:
  #     MYSQL_ROOT_PASSWORD: root
  #     MYSQL_DATABASE: test
  #     MYSQL_USER: root
  #     MYSQL_PASSWORD: root
  #   ports:
  #     - "3306:3306"
  #   volumes:
  #     - mysql_data:/var/lib/mysql
  #     - ./init.sql:/docker-entrypoint-initdb.d/init.sql
  #   command: --default-authentication-plugin=mysql_native_password --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci
  #   networks:
  #     - nestjs-network
  #   restart: unless-stopped

  # Redis (可选，用于缓存)
  redis:
    image: redis:latest
    container_name: nestjs-auth-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - nestjs-network
    restart: unless-stopped

  # NestJS 应用
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: nestjs-app
    ports:   
      - "3002:3002"
    environment:
      # 通过环境变量传递配置（推荐方式）
      # 日志配置
      LOG_LEVEL: info
      APP_NAME: nestjs-app
      NODE_ENV: production
      PORT: 3002
      # DB_HOST: mysql
      DB_HOST: host.docker.internal
      DB_PORT: 3306
      DB_USERNAME: root
      DB_PASSWORD: root
      DB_NAME: test
      DB_MAX_CONNECTIONS: 20
      DB_CONNECTION_TIMEOUT: 60000
      JWT_SECRET: your-super-secure-production-jwt-secret-change-this
      JWT_EXPIRES_IN: 15m
      JWT_REFRESH_SECRET: your-super-secure-production-refresh-secret-change-this
      JWT_REFRESH_EXPIRES_IN: 7d
      THROTTLE_TTL: 60000
      THROTTLE_LIMIT: 100
      REDIS_HOST: redis
      REDIS_PORT: 6379
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_USERNAME: admin
      RABBITMQ_PASSWORD: admin123
    depends_on:
      # - mysql
      - redis
    networks:
      - nestjs-network
    restart: unless-stopped
    # 健康检查
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3002/api/docs"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    # 应用日志配置
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "5"
        labels: "service=nestjs-app"  
     # 挂载日志目录到宿主机
    volumes:
      - ./logs:/app/logs    


    # NestJS 应用
  app2:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: nestjs-app2
    ports:   
      - "3003:3003"
    environment:
      # 通过环境变量传递配置（推荐方式）
      # 日志配置
      LOG_LEVEL: info
      APP_NAME: nestjs-app2
      NODE_ENV: production
      PORT: 3003
      # DB_HOST: mysql
      DB_HOST: host.docker.internal
      DB_PORT: 3306
      DB_USERNAME: root
      DB_PASSWORD: root
      DB_NAME: test
      DB_MAX_CONNECTIONS: 20
      DB_CONNECTION_TIMEOUT: 60000
      JWT_SECRET: your-super-secure-production-jwt-secret-change-this
      JWT_EXPIRES_IN: 15m
      JWT_REFRESH_SECRET: your-super-secure-production-refresh-secret-change-this
      JWT_REFRESH_EXPIRES_IN: 7d
      THROTTLE_TTL: 60000
      THROTTLE_LIMIT: 100
      REDIS_HOST: redis
      REDIS_PORT: 6379
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_USERNAME: admin
      RABBITMQ_PASSWORD: admin123
    depends_on:
      # - mysql
      - redis
    networks:
      - nestjs-network
    restart: unless-stopped
    # 健康检查
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3003/api/docs"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    # 应用日志配置
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "5"
        labels: "service=nestjs-app2"  
     # 挂载日志目录到宿主机
    volumes:
      - ./logs:/app2/logs   


    # NestJS 应用
  app3:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: nestjs-app3
    ports:   
      - "3004:3004"
    environment:
      # 通过环境变量传递配置（推荐方式）
      # 日志配置
      LOG_LEVEL: info
      APP_NAME: nestjs-app3
      NODE_ENV: production
      PORT: 3004
      # DB_HOST: mysql
      DB_HOST: host.docker.internal
      DB_PORT: 3306
      DB_USERNAME: root
      DB_PASSWORD: root
      DB_NAME: test
      DB_MAX_CONNECTIONS: 20
      DB_CONNECTION_TIMEOUT: 60000
      JWT_SECRET: your-super-secure-production-jwt-secret-change-this
      JWT_EXPIRES_IN: 15m
      JWT_REFRESH_SECRET: your-super-secure-production-refresh-secret-change-this
      JWT_REFRESH_EXPIRES_IN: 7d
      THROTTLE_TTL: 60000
      THROTTLE_LIMIT: 100
      REDIS_HOST: redis
      REDIS_PORT: 6379
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_USERNAME: admin
      RABBITMQ_PASSWORD: admin123
    depends_on:
      # - mysql
      - redis
    networks:
      - nestjs-network
    restart: unless-stopped
    # 健康检查
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3004/api/docs"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    # 应用日志配置
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "5"
        labels: "service=nestjs-app3"  
     # 挂载日志目录到宿主机
    volumes:
      - ./logs:/app3/logs           


  nginx:
    image: nginx:latest
    container_name: nestjs-nginx
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - app
      - app2
      - app3
    networks:
      - nestjs-network    

  rabbitmq:
    image: rabbitmq:management
    container_name: nestjs-rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: admin123
      RABBITMQ_DEFAULT_VHOST: /
    ports:
      - "5672:5672"     # AMQP 端口
      - "15672:15672"   # Management UI 端口
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
      # - ./rabbitmq/enabled_plugins:/etc/rabbitmq/enabled_plugins
    networks:
      - nestjs-network
    restart: unless-stopped
    # 启用延迟消息插件
    # command: >
    #   bash -c "
    #     rabbitmq-plugins enable rabbitmq_delayed_message_exchange &&
    #     rabbitmq-server
    #   "
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        labels: "service=rabbitmq"    

  # Prometheus 监控服务
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: unless-stopped
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    ports:
      - "9090:9090"
    networks:
      - nestjs-network
    depends_on:
      - node-exporter
      



    # Grafana 可视化面板
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    restart: unless-stopped
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    ports:
      - "3000:3000"
    networks:
      - nestjs-network
    depends_on:
      - prometheus



   # Node Exporter 主机指标收集
  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter
    restart: unless-stopped
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc)($$|/)'
    ports:
      - "9100:9100"
    networks:
      - nestjs-network
    privileged: true
    pid: host

volumes:
  # mysql_data:
  redis_data:
  rabbitmq_data:
  grafana_data:
  prometheus_data:

networks:
  nestjs-network:
    driver: bridge
